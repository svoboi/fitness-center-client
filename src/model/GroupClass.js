/**
 * Fitness center backend API
 * backend API for Fitness center
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient.js';
import GroupClassTrainersInner from './GroupClassTrainersInner.js';
import Room from './Room.js';
import SportType from './SportType.js';

/**
 * The GroupClass model module.
 * @module model/GroupClass
 * @version 1.0.0
 */
class GroupClass {
    /**
     * Constructs a new <code>GroupClass</code>.
     * @alias module:model/GroupClass
     * @param timeFrom {Date}
     * @param timeTo {Date}
     * @param capacity {Number}
     * @param room {module:model/Room}
     * @param sportType {module:model/SportType}
     */
    constructor(timeFrom, timeTo, capacity, room, sportType) {

        GroupClass.initialize(this, timeFrom, timeTo, capacity, room, sportType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, timeFrom, timeTo, capacity, room, sportType) {
        obj['timeFrom'] = timeFrom;
        obj['timeTo'] = timeTo;
        obj['capacity'] = capacity;
        obj['room'] = room;
        obj['sportType'] = sportType;
    }

    /**
     * Constructs a <code>GroupClass</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupClass} obj Optional instance to populate.
     * @return {module:model/GroupClass} The populated <code>GroupClass</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupClass();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('timeFrom')) {
                obj['timeFrom'] = ApiClient.convertToType(data['timeFrom'], 'Date');
            }
            if (data.hasOwnProperty('timeTo')) {
                obj['timeTo'] = ApiClient.convertToType(data['timeTo'], 'Date');
            }
            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], 'Number');
            }
            if (data.hasOwnProperty('room')) {
                obj['room'] = Room.constructFromObject(data['room']);
            }
            if (data.hasOwnProperty('sportType')) {
                obj['sportType'] = SportType.constructFromObject(data['sportType']);
            }
            if (data.hasOwnProperty('trainers')) {
                obj['trainers'] = ApiClient.convertToType(data['trainers'], [GroupClassTrainersInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupClass</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupClass</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupClass.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `room`
        if (data['room']) { // data not null
            Room.validateJSON(data['room']);
        }
        // validate the optional field `sportType`
        if (data['sportType']) { // data not null
            SportType.validateJSON(data['sportType']);
        }
        if (data['trainers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['trainers'])) {
                throw new Error("Expected the field `trainers` to be an array in the JSON data but got " + data['trainers']);
            }
            // validate the optional field `trainers` (array)
            for (const item of data['trainers']) {
                GroupClassTrainersInner.validateJSON(item);
            }
            ;
        }

        return true;
    }


}

GroupClass.RequiredProperties = ["timeFrom", "timeTo", "capacity", "room", "sportType"];

/**
 * @member {Number} id
 */
GroupClass.prototype['id'] = undefined;

/**
 * @member {Date} timeFrom
 */
GroupClass.prototype['timeFrom'] = undefined;

/**
 * @member {Date} timeTo
 */
GroupClass.prototype['timeTo'] = undefined;

/**
 * @member {Number} capacity
 */
GroupClass.prototype['capacity'] = undefined;

/**
 * @member {module:model/Room} room
 */
GroupClass.prototype['room'] = undefined;

/**
 * @member {module:model/SportType} sportType
 */
GroupClass.prototype['sportType'] = undefined;

/**
 * @member {Array.<module:model/GroupClassTrainersInner>} trainers
 */
GroupClass.prototype['trainers'] = undefined;


export default GroupClass;

